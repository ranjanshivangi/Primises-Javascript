In JavaScript, a promise is a good way to handle asynchronous operations. 
It is used to find out if the asynchronous operation is successfully completed or not.
A promise may have one of three states-
Pending
Fulfilled
Rejected
A promise starts in a pending state. That means the process is not complete.
If the operation is successful, the process ends in a fulfilled state. 
And, if an error occurs, the process ends in a rejected state.

Creating Promise - To create a promise object, we use the Promise() constructor.
The Promise() constructor takes a function as an argument. 
The function also accepts two functions resolve() and reject().
If the promise returns successfully, the resolve() function is called. 
And, if an error occurs, the reject() function is called.

JavaScript Promise Chaining - Promises are useful when you have to handle more than one asynchronous task, one after another. 
For that, we use promise chaining.
You can perform an operation after a promise is resolved using methods then(), catch() and finally().

JavaScript then() method - The then() method is used with the callback when the promise is successfully fulfilled or resolved.
The syntax of then() method is:
promiseObject.then(onFulfilled, onRejected);

JavaScript catch() method - The catch() method is used with the callback when the promise is rejected or if an error occurs.

JavaScript Promise Methods - There are various methods available to the Promise object.

Method	                Description
all(iterable)	        Waits for all promises to be resolved or any one to be rejected
allSettled(iterable)	Waits until all promises are either resolved or rejected
any(iterable)	        Returns the promise value as soon as any one of the promises is fulfilled
race(iterable)	        Wait until any of the promises is resolved or rejected
reject(reason)	        Returns a new Promise object that is rejected for the given reason
resolve(value)	        Returns a new Promise object that is resolved with the given value
catch()	                Appends the rejection handler callback
then()	                Appends the resolved handler callback
finally()	            Appends a handler to the promise